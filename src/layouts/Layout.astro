---
interface Props {
	title?: string;
	description?: string;
}

const { title = "Portfolio | Dark Minimalist Design", description = "A dark-themed minimalist portfolio with blue accents creating a dramatic, immersive experience." } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={description} />
		
		<!-- Open Graph / Social Media Meta Tags -->
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content="https://yourportfolio.com" />
		<meta property="og:image" content="/social-preview.jpg" />
		
		<!-- Google Fonts: Montserrat (Light, Regular) and Roboto -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;700&family=Roboto:wght@300;400;500;700&family=JetBrains+Mono:wght@300;400;500&display=swap" rel="stylesheet">
		
		<title>{title}</title>
	</head>
	<body>
		<slot />
		<!-- Cursor Effect Div -->
		<div class="cursor-dot-outline"></div>
		<div class="cursor-dot"></div>
	</body>
</html>

<script>
	// Custom cursor effect
	document.addEventListener('DOMContentLoaded', () => {
		const cursor = document.querySelector('.cursor-dot');
		const cursorOutline = document.querySelector('.cursor-dot-outline');
		
		if (cursor && cursorOutline && window.innerWidth > 768) {
			document.addEventListener('mousemove', (e) => {
				cursor.style.left = e.clientX + 'px';
				cursor.style.top = e.clientY + 'px';
				
				// Smoother movement for the outline with a slight delay
				setTimeout(() => {
					cursorOutline.style.left = e.clientX + 'px';
					cursorOutline.style.top = e.clientY + 'px';
				}, 80);
			});
			
			// Show cursor when mouse enters the window
			document.addEventListener('mouseenter', () => {
				cursor.style.opacity = 1;
				cursorOutline.style.opacity = 1;
			});
			
			// Hide cursor when mouse leaves the window
			document.addEventListener('mouseleave', () => {
				cursor.style.opacity = 0;
				cursorOutline.style.opacity = 0;
			});
			
			// Scale effects for interactive elements
			const interactiveElements = document.querySelectorAll('a, button, input, textarea, [role="button"]');
			interactiveElements.forEach(el => {
				el.addEventListener('mouseenter', () => {
					cursor.style.transform = 'translate(-50%, -50%) scale(0.5)';
					cursorOutline.style.transform = 'translate(-50%, -50%) scale(1.5)';
				});
				
				el.addEventListener('mouseleave', () => {
					cursor.style.transform = 'translate(-50%, -50%) scale(1)';
					cursorOutline.style.transform = 'translate(-50%, -50%) scale(1)';
				});
			});
			
			// Show cursor
			setTimeout(() => {
				cursor.style.opacity = 1;
				cursorOutline.style.opacity = 1;
			}, 1000);
		}
	});
</script>

<style is:global>
	@import "../styles/global.css";
	
	/* Add any global styles that need to override global.css here */
	body {
		overflow-x: hidden;
		background-image: radial-gradient(circle at 50% 0%, rgba(58, 134, 255, 0.05) 0%, rgba(10, 14, 23, 0) 50%);
	}
	
	main {
		margin: 0 auto;
		max-width: var(--container-max-width);
	}
	
	section {
		padding-top: calc(var(--space-xl) * 0.8);
		padding-bottom: calc(var(--space-xl) * 0.8);
	}
	
	/* Refined cursor */
	.cursor-dot {
		width: 5px;
		height: 5px;
	}
	
	.cursor-dot-outline {
		width: 25px;
		height: 25px;
	}
	
	/* Hide cursor on mobile */
	@media (max-width: 768px) {
		.cursor-dot, .cursor-dot-outline {
			display: none;
		}
	}
</style>
