---
const skills = {
  frontend: ["HTML5", "CSS3", "JavaScript", "React", "Vue.js", "TypeScript", "SASS", "Tailwind"],
  backend: ["Node.js", "Express", "Python", "GraphQL", "REST APIs", "MongoDB", "PostgreSQL", "Firebase"],
  design: ["Figma", "Adobe XD", "UI/UX", "Responsive Design", "Animation", "Wireframing"],
  tools: ["Git", "Webpack", "Docker", "Jest", "GitHub Actions", "VS Code", "Linux", "AWS"]
};

const commands = [
  { cmd: "help", description: "Show available commands" },
  { cmd: "ls skills", description: "List all skill categories" },
  { cmd: "show frontend", description: "Display frontend skills" },
  { cmd: "show backend", description: "Display backend skills" },
  { cmd: "show tools", description: "Display development tools" },
  { cmd: "clear", description: "Clear the terminal" }
];
---

<section id="about" class="section about">
  <div class="container">
    <h2 class="section-title">
      <span class="text-accent">01.</span> About Me
    </h2>
    <div class="about-content">
      <div class="about-text">
        <p class="js-fade-in">
          Hello! I'm John, a web developer based in New York City who enjoys creating 
          elegant digital experiences. My journey in web development began in 2015 when I 
          decided to try creating a custom WordPress theme ‚Äî turns out hacking together a 
          custom theme taught me a lot about HTML & CSS!
        </p>
        <p class="js-fade-in">
          Fast-forward to today, and I've had the privilege of working at a <a href="#">digital agency</a>, 
          a <a href="#">startup</a>, and a <a href="#">large corporation</a>. My main focus these days 
          is building accessible, inclusive products and digital experiences at 
          <a href="#">Acme Corporation</a> for a variety of clients.
        </p>
        <p class="js-fade-in">
          I also recently launched a <a href="#">course</a> that covers everything you need to build a web app with the MERN stack.
        </p>
      </div>
      <div class="about-image-container js-fade-in">
        <div class="about-image-wrapper">
          <img src="/placeholder-profile.jpg" alt="Profile Picture" class="about-image" />
        </div>
      </div>
    </div>
    
    <div class="about-skills">
      <h3>Skills</h3>
      
      <div class="skills-terminal">
        <div class="terminal-header">
          <div class="terminal-buttons">
            <span class="terminal-button"></span>
            <span class="terminal-button"></span>
            <span class="terminal-button"></span>
          </div>
          <div class="terminal-title">skills.sh</div>
        </div>
        
        <div class="terminal-body">
          <p class="terminal-instructions">
            Type commands in the terminal below to explore my skills:
          </p>
          
          <!-- Help section -->
          <div id="terminal-help" class="terminal-section">
            <div class="terminal-line">
              <span class="terminal-prompt">user@portfolio:~$</span> <span class="terminal-command">help</span>
            </div>
            <div class="terminal-output">
              <p class="output-title">Available commands:</p>
              <div class="command-list">
                {commands.map((cmd) => (
                  <p class="command-item">
                    <span class="command-name">{cmd.cmd}</span> - <span class="command-desc">{cmd.description}</span>
                  </p>
                ))}
              </div>
            </div>
          </div>
          
          <!-- Skills list section -->
          <div id="terminal-skills-list" class="terminal-section" style="display: none;">
            <div class="terminal-line">
              <span class="terminal-prompt">user@portfolio:~$</span> <span class="terminal-command">ls skills</span>
            </div>
            <div class="terminal-output">
              <div class="skills-categories">
                <p>üìÅ frontend</p>
                <p>üìÅ backend</p>
                <p>üìÅ tools</p>
                <p class="terminal-tip">Use 'show [category]' to view skills in each category</p>
              </div>
            </div>
          </div>
          
          <!-- Frontend skills section -->
          <div id="terminal-frontend" class="terminal-section" style="display: none;">
            <div class="terminal-line">
              <span class="terminal-prompt">user@portfolio:~$</span> <span class="terminal-command">show frontend</span>
            </div>
            <div class="terminal-output">
              <p class="output-title">Frontend Skills:</p>
              <div class="skills-grid">
                {skills.frontend.map((skill, index) => (
                  <div class="skill-item" style={`animation-delay: ${index * 50}ms`}>
                    <span class="terminal-prompt">‚Üí</span> {skill}
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          <!-- Backend skills section -->
          <div id="terminal-backend" class="terminal-section" style="display: none;">
            <div class="terminal-line">
              <span class="terminal-prompt">user@portfolio:~$</span> <span class="terminal-command">show backend</span>
            </div>
            <div class="terminal-output">
              <p class="output-title">Backend Skills:</p>
              <div class="skills-grid">
                {skills.backend.map((skill, index) => (
                  <div class="skill-item" style={`animation-delay: ${index * 50}ms`}>
                    <span class="terminal-prompt">‚Üí</span> {skill}
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          <!-- Tools skills section -->
          <div id="terminal-tools" class="terminal-section" style="display: none;">
            <div class="terminal-line">
              <span class="terminal-prompt">user@portfolio:~$</span> <span class="terminal-command">show tools</span>
            </div>
            <div class="terminal-output">
              <p class="output-title">Tools & Technologies:</p>
              <div class="skills-grid">
                {skills.tools.map((skill, index) => (
                  <div class="skill-item" style={`animation-delay: ${index * 50}ms`}>
                    <span class="terminal-prompt">‚Üí</span> {skill}
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          <!-- Terminal input -->
          <form id="terminal-form" class="terminal-input-container">
            <div class="terminal-line">
              <span class="terminal-prompt">user@portfolio:~$</span>
              <input 
                type="text" 
                id="terminal-input" 
                class="terminal-input" 
                placeholder="Type 'help' for commands"
                autocomplete="off"
                spellcheck="false"
              />
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  import anime from 'animejs';
  
  // Animation for About section
  const observerAbout = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Animate content
        anime.timeline({
          easing: 'easeOutExpo'
        })
        .add({
          targets: '#about .section-title',
          opacity: [0, 1],
          translateY: [20, 0],
          duration: 800
        })
        .add({
          targets: '.js-fade-in',
          opacity: [0, 1],
          translateY: [20, 0],
          delay: anime.stagger(200),
          duration: 800
        }, '-=600');
        
        observerAbout.disconnect();
      }
    });
  }, { threshold: 0.1 });
  
  document.addEventListener('DOMContentLoaded', () => {
    const aboutSection = document.querySelector('#about');
    if (aboutSection) {
      observerAbout.observe(aboutSection);
    }
    
    const terminalInput = document.getElementById('terminal-input');
    const terminalForm = document.getElementById('terminal-form');
    const helpSection = document.getElementById('terminal-help');
    const skillsListSection = document.getElementById('terminal-skills-list');
    const frontendSection = document.getElementById('terminal-frontend');
    const backendSection = document.getElementById('terminal-backend');
    const toolsSection = document.getElementById('terminal-tools');
    const outputSections = [helpSection, skillsListSection, frontendSection, backendSection, toolsSection];
    
    // Initially show the help section
    helpSection.style.display = 'block';

    // Handle command submission
    terminalForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const command = terminalInput.value.trim().toLowerCase();
      terminalInput.value = '';
      
      // Hide all sections first
      outputSections.forEach(section => {
        section.style.display = 'none';
      });
      
      // Process command
      if (command === 'help') {
        helpSection.style.display = 'block';
      } else if (command === 'ls skills') {
        skillsListSection.style.display = 'block';
      } else if (command === 'show frontend') {
        frontendSection.style.display = 'block';
      } else if (command === 'show backend') {
        backendSection.style.display = 'block';
      } else if (command === 'show tools') {
        toolsSection.style.display = 'block';
      } else if (command === 'clear') {
        // Do nothing, all sections are already hidden
      } else {
        // If invalid command, show help
        helpSection.style.display = 'block';
        const commandNotFound = document.createElement('p');
        commandNotFound.className = 'terminal-error';
        commandNotFound.textContent = `Command not found: ${command}`;
        helpSection.prepend(commandNotFound);
        
        // Remove the error message after 3 seconds
        setTimeout(() => {
          commandNotFound.remove();
        }, 3000);
      }
    });
  });
</script>

<style>
  .about {
    margin-top: calc(var(--space-xl) * 1.5);
  }
  
  .section-title {
    display: flex;
    align-items: center;
    margin-bottom: var(--space-md);
    font-size: var(--fs-lg);
  }
  
  .section-title::after {
    content: '';
    display: block;
    height: 1px;
    width: 250px;
    background: linear-gradient(90deg, var(--color-accent), transparent);
    margin-left: var(--space-sm);
  }
  
  .about-content {
    display: grid;
    grid-template-columns: 3fr 2fr;
    gap: var(--space-lg);
    margin-bottom: var(--space-lg);
  }
  
  .about-text {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }
  
  .about-text p {
    color: var(--color-text-muted);
    font-size: var(--fs-sm);
    line-height: 1.6;
    margin: 0;
  }
  
  .about-text a {
    color: var(--color-accent);
    position: relative;
    text-decoration: none;
    transition: all var(--transition-normal);
  }
  
  .about-text a::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 1px;
    background-color: var(--color-accent);
    transition: width var(--transition-normal);
  }
  
  .about-text a:hover {
    color: var(--color-accent-alt);
  }
  
  .about-text a:hover::after {
    width: 100%;
  }
  
  .about-image-container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
  }
  
  .about-image-wrapper {
    position: relative;
    width: 80%;
    max-width: 250px;
    border-radius: 4px;
    overflow: hidden;
  }
  
  .about-image-wrapper::after {
    content: '';
    position: absolute;
    top: 10px;
    left: 10px;
    width: 100%;
    height: 100%;
    border: 1px solid var(--color-accent);
    border-radius: 4px;
    z-index: -1;
    transition: all var(--transition-normal);
  }
  
  .about-image-wrapper:hover::after {
    top: 8px;
    left: 8px;
  }
  
  .about-image {
    width: 100%;
    border-radius: 4px;
    filter: grayscale(100%) contrast(1.1);
    transition: all var(--transition-normal);
  }
  
  .about-image:hover {
    filter: grayscale(0) contrast(1);
  }
  
  /* Terminal Interface Styling */
  .skills-terminal {
    background-color: #121a29;
    border-radius: 6px;
    overflow: hidden;
    font-family: 'JetBrains Mono', 'Roboto Mono', 'Courier New', monospace;
    border: 1px solid rgba(58, 134, 255, 0.2);
    margin: var(--space-lg) 0;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.4);
    max-width: 100%;
  }
  
  .terminal-header {
    background-color: #0d141e;
    padding: var(--space-xs) var(--space-sm);
    display: flex;
    align-items: center;
    border-bottom: 1px solid rgba(58, 134, 255, 0.1);
  }
  
  .terminal-buttons {
    display: flex;
    gap: 6px;
    margin-right: var(--space-sm);
  }
  
  .terminal-button {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }
  
  .terminal-button:nth-child(1) {
    background-color: #ff5f56;
  }
  
  .terminal-button:nth-child(2) {
    background-color: #ffbd2e;
  }
  
  .terminal-button:nth-child(3) {
    background-color: #27c93f;
  }
  
  .terminal-title {
    font-size: var(--fs-xs);
    color: var(--color-text-muted);
  }
  
  .terminal-body {
    padding: var(--space-md);
    color: var(--color-text);
    font-size: var(--fs-xs);
    line-height: 1.6;
  }
  
  .terminal-instructions {
    color: var(--color-text-muted);
    margin-bottom: var(--space-md);
    border-bottom: 1px solid rgba(58, 134, 255, 0.1);
    padding-bottom: var(--space-sm);
  }
  
  .terminal-line {
    display: flex;
    align-items: center;
    margin-bottom: var(--space-sm);
  }
  
  .terminal-prompt {
    color: var(--color-accent);
    margin-right: var(--space-xs);
    user-select: none;
  }
  
  .terminal-command {
    color: #50FA7B;
  }
  
  .terminal-output {
    margin-left: var(--space-md);
    padding: var(--space-sm) 0;
  }
  
  .output-title {
    color: #FFB86C;
    margin-bottom: var(--space-xs);
  }
  
  .command-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }
  
  .command-name {
    color: #50FA7B;
    font-weight: var(--fw-medium);
  }
  
  .command-desc {
    color: var(--color-text-muted);
  }
  
  .skills-categories {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }
  
  .skills-categories p {
    color: #8BE9FD;
  }
  
  .terminal-tip {
    margin-top: var(--space-sm);
    font-style: italic;
    color: var(--color-text-muted) !important;
  }
  
  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
    gap: var(--space-xs);
  }
  
  .skill-item {
    display: flex;
    align-items: center;
    animation: skill-fade-in 0.5s ease forwards;
    opacity: 0;
  }
  
  @keyframes skill-fade-in {
    from { opacity: 0; transform: translateY(5px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .terminal-input-container {
    margin-top: var(--space-md);
    border-top: 1px solid rgba(58, 134, 255, 0.1);
    padding-top: var(--space-sm);
  }
  
  .terminal-input {
    background: transparent;
    border: none;
    color: #F8F8F2;
    font-family: 'JetBrains Mono', 'Roboto Mono', monospace;
    font-size: var(--fs-xs);
    outline: none;
    width: 70%;
    padding: 0;
  }
  
  .terminal-error {
    color: #FF5555;
    margin-bottom: var(--space-sm);
  }
  
  .terminal-section {
    margin-bottom: var(--space-md);
  }
  
  /* Responsive styles */
  @media (max-width: 768px) {
    .skills-grid {
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    }
    
    .terminal-input {
      width: 60%;
    }
  }
</style> 