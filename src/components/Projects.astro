---
const featuredProjects = [
  {
    title: "Modern E-commerce Platform",
    description: "A responsive e-commerce platform built with React, Node.js, and MongoDB. Features include user authentication, product search, shopping cart, payment processing, and admin dashboard.",
    technologies: ["React", "Node.js", "Express", "MongoDB", "Stripe", "Redux"],
    image: "/projects/ecommerce.jpg",
    github: "#",
    liveLink: "#",
    featured: true,
    themeColors: {
      primary: "#4361EE",
      secondary: "#3A0CA3",
      accent: "#F72585",
      muted: "#4CC9F0"
    }
  },
  {
    title: "Portfolio Website Template",
    description: "A customizable portfolio template for developers and designers. Built with Astro, featuring dark mode, responsive design, animations, and optimized performance.",
    technologies: ["Astro", "JavaScript", "SCSS", "AnimeJS", "Responsive Design"],
    image: "/projects/portfolio.jpg",
    github: "#",
    liveLink: "#",
    featured: true,
    themeColors: {
      primary: "#3A86FF",
      secondary: "#5D9DFF",
      accent: "#00B4D8",
      muted: "#90E0EF"
    }
  },
  {
    title: "Task Management Application",
    description: "A fully-featured task management app with real-time updates. Includes team collaboration, file attachments, task assignments, and progress tracking.",
    technologies: ["Vue.js", "Firebase", "Tailwind CSS", "JavaScript"],
    image: "/projects/taskmanager.jpg",
    github: "#",
    liveLink: "#",
    featured: true,
    themeColors: {
      primary: "#38B000",
      secondary: "#008000",
      accent: "#70E000",
      muted: "#CCFF33"
    }
  }
];

const otherProjects = [
  {
    title: "Weather Dashboard",
    description: "A weather forecast application that provides current and 5-day weather information based on user location or search.",
    technologies: ["JavaScript", "OpenWeather API", "HTML5", "CSS3"],
    github: "#",
    liveLink: "#",
    themeColors: {
      primary: "#053C5E",
      secondary: "#1D3557",
      accent: "#A8DADC",
      muted: "#F1FAEE"
    }
  },
  {
    title: "Blog Platform",
    description: "A full-stack blog platform with user authentication, markdown support, commenting system, and content management.",
    technologies: ["Next.js", "GraphQL", "PostgreSQL", "Tailwind CSS"],
    github: "#",
    liveLink: "#",
    themeColors: {
      primary: "#7209B7",
      secondary: "#560BAD",
      accent: "#B5179E",
      muted: "#F72585"
    }
  },
  {
    title: "Browser Extension",
    description: "A productivity browser extension that helps users track time spent on different websites and set limits.",
    technologies: ["JavaScript", "Chrome API", "Local Storage", "CSS3"],
    github: "#",
    liveLink: "#",
    themeColors: {
      primary: "#FFB703",
      secondary: "#FB8500",
      accent: "#FD9E02",
      muted: "#FFCE70"
    }
  },
  {
    title: "Fitness Tracker",
    description: "A mobile-friendly workout tracking application with progress visualization, workout plans, and exercise library.",
    technologies: ["React", "Node.js", "Chart.js", "MongoDB"],
    github: "#",
    liveLink: "#",
    themeColors: {
      primary: "#EF476F",
      secondary: "#F94144",
      accent: "#F15BB5",
      muted: "#F9C0C0"
    }
  },
  {
    title: "Recipe Finder",
    description: "An application that helps users find recipes based on available ingredients, dietary restrictions, and cooking time.",
    technologies: ["Vue.js", "Spoonacular API", "Vuex", "SCSS"],
    github: "#",
    liveLink: "#",
    themeColors: {
      primary: "#845EC2",
      secondary: "#4B4453",
      accent: "#B39CD0",
      muted: "#D5CABD"
    }
  },
  {
    title: "Social Media Dashboard",
    description: "An analytics dashboard that aggregates data from multiple social media platforms into a unified interface.",
    technologies: ["React", "D3.js", "Social Media APIs", "Material UI"],
    github: "#",
    liveLink: "#",
    themeColors: {
      primary: "#2A9D8F",
      secondary: "#264653",
      accent: "#E9C46A",
      muted: "#F4A261"
    }
  }
];

// All projects combined
const allProjects = [...featuredProjects, ...otherProjects];

// Get unique technologies from all projects
const allTechnologies = [...new Set(
  allProjects.flatMap(project => project.technologies)
)].sort();
---

<section id="projects" class="section projects">
  <div class="container">
    <h2 class="section-title">
      <span class="text-accent">02.</span> Projects
    </h2>
    
    <div class="project-filters js-fade-in">
      <button class="filter-button active" data-filter="all">All Projects</button>
      <button class="filter-button" data-filter="featured">Featured</button>
      <button class="filter-button" data-filter="React">React</button>
      <button class="filter-button" data-filter="Node.js">Node.js</button>
      <button class="filter-button" data-filter="JavaScript">JavaScript</button>
    </div>
    
    <div class="featured-projects">
      {featuredProjects.map((project, index) => (
        <div class="featured-project js-fade-in" 
          data-technologies={project.technologies.join(',')}
          data-theme-colors={JSON.stringify(project.themeColors)}>
          <div class="project-content">
            <p class="project-overline">Featured Project</p>
            <h3 class="project-title">{project.title}</h3>
            <div class="project-description">
              <p>{project.description}</p>
            </div>
            <div class="project-color-palette">
              <div class="color-swatch" style={`background-color: ${project.themeColors.primary}`}></div>
              <div class="color-swatch" style={`background-color: ${project.themeColors.secondary}`}></div>
              <div class="color-swatch" style={`background-color: ${project.themeColors.accent}`}></div>
              <div class="color-swatch" style={`background-color: ${project.themeColors.muted}`}></div>
            </div>
            <ul class="project-tech-list">
              {project.technologies.map((tech) => (
                <li class="tech-tag" data-tech={tech}>{tech}</li>
              ))}
            </ul>
            <div class="project-links">
              <a href={project.github} class="project-link">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                </svg>
              </a>
              <a href={project.liveLink} class="project-link">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                  <polyline points="15 3 21 3 21 9"></polyline>
                  <line x1="10" y1="14" x2="21" y2="3"></line>
                </svg>
              </a>
            </div>
          </div>
          <div class="project-image">
            <div class="project-image-wrapper">
              <img src={project.image} alt={project.title} />
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <h3 class="other-projects-title js-fade-in">Other Noteworthy Projects</h3>
    
    <div class="project-grid js-fade-in">
      {otherProjects.map((project) => (
        <div class="project-card" 
          data-technologies={project.technologies.join(',')}
          data-theme-colors={JSON.stringify(project.themeColors)}>
          <div class="card-header">
            <div class="card-folder-icon">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
              </svg>
            </div>
            <div class="project-color-palette small">
              <div class="color-swatch" style={`background-color: ${project.themeColors.primary}`}></div>
              <div class="color-swatch" style={`background-color: ${project.themeColors.secondary}`}></div>
              <div class="color-swatch" style={`background-color: ${project.themeColors.accent}`}></div>
              <div class="color-swatch" style={`background-color: ${project.themeColors.muted}`}></div>
            </div>
            <div class="card-links">
              <a href={project.github} class="card-link">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                </svg>
              </a>
              <a href={project.liveLink} class="card-link">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                  <polyline points="15 3 21 3 21 9"></polyline>
                  <line x1="10" y1="14" x2="21" y2="3"></line>
                </svg>
              </a>
            </div>
          </div>
          <h3 class="card-title">
            <a href={project.liveLink}>{project.title}</a>
          </h3>
          <p class="card-description">{project.description}</p>
          <ul class="card-tech-list">
            {project.technologies.map((tech) => (
              <li class="tech-tag" data-tech={tech}>{tech}</li>
            ))}
          </ul>
        </div>
      ))}
    </div>
    
    <div class="projects-more js-fade-in">
      <a href="#" class="more-button">Show More Projects</a>
    </div>
  </div>
</section>

<script>
  import anime from 'animejs';
  
  // Animation for Projects section
  const observerProjects = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Animate section title
        anime({
          targets: '#projects .section-title',
          opacity: [0, 1],
          translateY: [20, 0],
          duration: 800,
          easing: 'easeOutExpo'
        });
        
        // Animate featured projects
        anime({
          targets: '.featured-project',
          opacity: [0, 1],
          translateY: [40, 0],
          delay: anime.stagger(200, {start: 300}),
          duration: 800,
          easing: 'easeOutExpo'
        });
        
        // Animate other elements
        anime({
          targets: '#projects .js-fade-in',
          opacity: [0, 1],
          translateY: [20, 0],
          delay: anime.stagger(100, {start: 600}),
          duration: 800,
          easing: 'easeOutExpo'
        });
        
        observerProjects.disconnect();
      }
    });
  }, { threshold: 0.1 });

  document.addEventListener('DOMContentLoaded', () => {
    const projectsSection = document.querySelector('#projects');
    if (projectsSection) {
      observerProjects.observe(projectsSection);
    }
    
    // Project image parallax effect
    const projectImages = document.querySelectorAll('.project-image-wrapper');
    
    projectImages.forEach(image => {
      const parent = image.closest('.featured-project');
      
      parent.addEventListener('mousemove', (e) => {
        const { left, top, width, height } = parent.getBoundingClientRect();
        const x = (e.clientX - left) / width - 0.5;  // -0.5 to 0.5
        const y = (e.clientY - top) / height - 0.5;  // -0.5 to 0.5
        
        // Apply subtle movement to the image wrapper
        image.style.transform = `perspective(1000px) rotateY(${x * 5}deg) rotateX(${y * -5}deg) scale3d(1.05, 1.05, 1.05)`;
        
        // Move the image slightly within the wrapper for depth
        const img = image.querySelector('img');
        if (img) {
          img.style.transform = `translateX(${x * 10}px) translateY(${y * 10}px)`;
        }
      });
      
      parent.addEventListener('mouseleave', () => {
        // Reset transforms when mouse leaves
        image.style.transform = 'perspective(1000px) rotateY(0deg) rotateX(0deg) scale3d(1, 1, 1)';
        
        const img = image.querySelector('img');
        if (img) {
          img.style.transform = 'translateX(0) translateY(0)';
        }
      });
      
      parent.addEventListener('mouseenter', () => {
        // Add initial transform
        image.style.transform = 'perspective(1000px) scale3d(1.02, 1.02, 1.02)';
      });
    });
    
    // Project filtering functionality
    const filterButtons = document.querySelectorAll('.filter-button');
    const featuredProjects = document.querySelectorAll('.featured-project');
    const projectCards = document.querySelectorAll('.project-card');
    const allProjects = [...featuredProjects, ...projectCards];
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Update active state
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        const filter = button.getAttribute('data-filter');
        
        // Filter projects
        allProjects.forEach(project => {
          const technologies = project.getAttribute('data-technologies');
          
          if (filter === 'all') {
            project.style.display = '';
          } else if (filter === 'featured') {
            if (project.classList.contains('featured-project')) {
              project.style.display = '';
            } else {
              project.style.display = 'none';
            }
          } else if (technologies && technologies.includes(filter)) {
            project.style.display = '';
          } else {
            project.style.display = 'none';
          }
        });
        
        // Animate the filtered projects
        anime({
          targets: '.featured-project:not([style*="display: none"]), .project-card:not([style*="display: none"])',
          opacity: [0, 1],
          translateY: [10, 0],
          delay: anime.stagger(50),
          duration: 300,
          easing: 'easeOutQuad'
        });
      });
    });
    
    // Show more projects button
    const moreButton = document.querySelector('.more-button');
    let isShowingAll = false;
    
    if (moreButton) {
      // Initially hide projects beyond the first 6
      const maxInitialProjects = 3;
      let visibleCount = 0;
      
      projectCards.forEach((card, index) => {
        if (index >= maxInitialProjects) {
          card.classList.add('hidden-project');
          card.style.display = 'none';
        }
      });
      
      moreButton.addEventListener('click', (e) => {
        e.preventDefault();
        
        if (!isShowingAll) {
          // Show all projects
          projectCards.forEach(card => {
            if (card.classList.contains('hidden-project')) {
              card.classList.remove('hidden-project');
              card.style.display = '';
            }
          });
          moreButton.textContent = 'Show Less';
          
          // Animate newly visible projects
          anime({
            targets: '.project-card:not(.hidden-project)',
            opacity: [0, 1],
            translateY: [20, 0],
            delay: anime.stagger(50),
            duration: 500,
            easing: 'easeOutQuad'
          });
        } else {
          // Hide projects beyond the first 6
          projectCards.forEach((card, index) => {
            if (index >= maxInitialProjects) {
              card.classList.add('hidden-project');
              card.style.display = 'none';
            }
          });
          moreButton.textContent = 'Show More Projects';
        }
        
        isShowingAll = !isShowingAll;
      });
    }
    
    // Enhanced hover effects for project cards with theme colors
    const projectSection = document.querySelector('.projects');
    const initialBgColor = getComputedStyle(document.documentElement).getPropertyValue('--color-bg-alt').trim();
    
    // Function to handle project hover effects and theme color changes
    function setupProjectThemeEffects(projects) {
      projects.forEach(project => {
        const themeColors = project.getAttribute('data-theme-colors');
        
        if (themeColors) {
          const colors = JSON.parse(themeColors);
          const techTags = project.querySelectorAll('.tech-tag');
          
          // Set technology tag colors based on the project theme
          techTags.forEach(tag => {
            tag.style.setProperty('--tag-color', colors.accent);
          });
          
          // Apply hover effects
          project.addEventListener('mouseenter', () => {
            // Background color transition for the section
            projectSection.style.background = `linear-gradient(to bottom, rgba(10, 14, 23, 0.9), rgba(10, 14, 23, 0.97)), 
                                              radial-gradient(circle at center, ${colors.primary}15 0%, transparent 70%)`;
            
            // Enhance project card with theme color
            if (project.classList.contains('project-card')) {
              anime({
                targets: project,
                translateY: -10,
                boxShadow: `0 15px 30px rgba(0, 0, 0, 0.3), 0 0 20px ${colors.primary}30`,
                borderColor: `${colors.primary}50`,
                duration: 300,
                easing: 'easeOutQuad'
              });
              
              // Update folder icon color
              const folderIcon = project.querySelector('.card-folder-icon svg');
              if (folderIcon) {
                folderIcon.style.color = colors.primary;
              }
            } else {
              // For featured projects
              project.style.borderColor = `${colors.primary}50`;
              project.style.boxShadow = `0 15px 30px rgba(0, 0, 0, 0.3), 0 0 20px ${colors.primary}30`;
            }
          });
          
          project.addEventListener('mouseleave', () => {
            // Reset background
            projectSection.style.background = '';
            
            if (project.classList.contains('project-card')) {
              anime({
                targets: project,
                translateY: 0,
                boxShadow: '0 10px 20px rgba(0, 0, 0, 0.2)',
                borderColor: 'transparent',
                duration: 300,
                easing: 'easeOutQuad'
              });
              
              // Reset folder icon color
              const folderIcon = project.querySelector('.card-folder-icon svg');
              if (folderIcon) {
                folderIcon.style.color = 'var(--color-accent)';
              }
            } else {
              // Reset for featured projects
              project.style.borderColor = 'rgba(58, 134, 255, 0.05)';
              project.style.boxShadow = '0 10px 20px rgba(0, 0, 0, 0.2)';
            }
          });
        }
      });
    }
    
    // Apply theme effects to all projects
    setupProjectThemeEffects(allProjects);
  });
</script>

<style>
  .projects {
    margin-top: calc(var(--space-xl) * 1.5);
    transition: background 0.5s ease-in-out;
  }
  
  .section-title {
    display: flex;
    align-items: center;
    margin-bottom: var(--space-md);
    font-size: var(--fs-lg);
  }
  
  .section-title::after {
    content: '';
    display: block;
    height: 1px;
    width: 300px;
    background: linear-gradient(90deg, var(--color-accent), transparent);
    margin-left: var(--space-sm);
  }
  
  /* Project filters */
  .project-filters {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: var(--space-xs);
    margin-bottom: var(--space-lg);
  }
  
  .filter-button {
    background-color: transparent;
    border: 1px solid rgba(58, 134, 255, 0.2);
    border-radius: 4px;
    color: var(--color-text);
    font-size: var(--fs-xs);
    padding: var(--space-xs) var(--space-sm);
    cursor: pointer;
    transition: all var(--transition-normal);
  }
  
  .filter-button:hover {
    background-color: rgba(58, 134, 255, 0.1);
    transform: translateY(-2px);
  }
  
  .filter-button.active {
    background-color: rgba(58, 134, 255, 0.2);
    border-color: var(--color-accent);
    color: var(--color-accent);
  }
  
  /* Project color palette */
  .project-color-palette {
    display: flex;
    gap: var(--space-xs);
    margin-bottom: var(--space-md);
  }
  
  .project-color-palette.small {
    gap: 3px;
  }
  
  .color-swatch {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: transform var(--transition-fast);
  }
  
  .color-swatch:hover {
    transform: scale(1.2);
  }
  
  .project-color-palette.small .color-swatch {
    width: 12px;
    height: 12px;
  }
  
  /* Tech tags with dynamic colors */
  .tech-tag {
    --tag-color: var(--color-accent);
    position: relative;
    padding-left: 18px;
  }
  
  .tech-tag::before {
    content: '•';
    position: absolute;
    left: 0;
    color: var(--tag-color);
    font-size: 1.2em;
  }
  
  /* Featured Projects */
  .featured-projects {
    display: flex;
    flex-direction: column;
    gap: calc(var(--space-xl));
    margin-bottom: var(--space-xl);
  }
  
  .featured-project {
    display: flex;
    flex-direction: row;
    align-items: center;
    position: relative;
    gap: var(--space-lg);
    padding: var(--space-md);
    border-radius: 12px;
    transition: all var(--transition-normal);
    background-color: rgba(18, 26, 41, 0.3);
    border: 1px solid rgba(58, 134, 255, 0.05);
  }
  
  .featured-project:hover {
    background-color: rgba(18, 26, 41, 0.6);
    border-color: rgba(58, 134, 255, 0.1);
    transform: translateY(-5px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
  }
  
  .featured-project:nth-child(odd) {
    flex-direction: row;
  }
  
  .featured-project:nth-child(even) {
    flex-direction: row-reverse;
  }
  
  .project-content {
    flex: 1;
    position: relative;
    z-index: 2;
  }
  
  .featured-project:nth-child(odd) .project-content {
    text-align: left;
  }
  
  .featured-project:nth-child(even) .project-content {
    text-align: right;
  }
  
  .featured-project:nth-child(even) .project-tech-list {
    justify-content: flex-end;
  }
  
  .featured-project:nth-child(even) .project-links {
    justify-content: flex-end;
  }
  
  .featured-project:nth-child(even) .project-color-palette {
    justify-content: flex-end;
  }
  
  .project-image {
    flex: 1;
    position: relative;
    z-index: 1;
  }
  
  .project-description {
    padding: var(--space-md);
    background-color: var(--color-background-alt);
    color: var(--color-text-muted);
    font-size: var(--fs-sm);
    border-radius: 8px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    margin-bottom: var(--space-md);
    border: 1px solid rgba(58, 134, 255, 0.1);
    transition: all var(--transition-normal);
  }
  
  .project-description p {
    margin: 0;
    line-height: 1.6;
  }
  
  .featured-project:hover .project-description {
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.25);
    border-color: rgba(58, 134, 255, 0.2);
  }
  
  .project-overline {
    color: var(--color-accent);
    font-family: var(--font-mono);
    font-size: var(--fs-xs);
    font-weight: var(--fw-normal);
    margin: 0 0 var(--space-xs) 0;
  }
  
  .project-title {
    color: var(--color-text-bright);
    font-size: var(--fs-lg);
    margin: 0 0 var(--space-md) 0;
  }
  
  .project-tech-list {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-sm);
    padding: 0;
    margin: 0 0 var(--space-md) 0;
    list-style: none;
  }
  
  .project-tech-list li {
    color: var(--color-text-muted);
    font-size: var(--fs-xs);
    font-family: var(--font-mono);
    white-space: nowrap;
  }
  
  .project-links {
    display: flex;
    gap: var(--space-md);
  }
  
  .project-link {
    color: var(--color-text-muted);
    transition: all var(--transition-normal);
  }
  
  .project-link:hover {
    color: var(--color-accent);
    transform: translateY(-2px);
  }
  
  .project-link svg {
    width: 20px;
    height: 20px;
  }
  
  .project-image-wrapper {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    transition: transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    will-change: transform;
  }
  
  .project-image-wrapper img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: grayscale(100%) contrast(1) brightness(70%);
    transition: all var(--transition-normal);
    transform-origin: center;
  }
  
  .project-image-wrapper::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(58, 134, 255, 0.1);
    z-index: 1;
    transition: all var(--transition-normal);
  }
  
  .featured-project:hover .project-image-wrapper img {
    filter: grayscale(0) contrast(1) brightness(100%);
  }
  
  .featured-project:hover .project-image-wrapper::before {
    background-color: transparent;
  }
  
  /* Other Projects */
  .other-projects-title {
    text-align: center;
    margin-bottom: var(--space-lg);
    font-size: var(--fs-md);
    color: var(--color-text-bright);
  }
  
  .project-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--space-md);
    margin-bottom: var(--space-lg);
  }
  
  .project-card {
    background-color: var(--color-background-alt);
    border-radius: 8px;
    padding: var(--space-md);
    transition: all var(--transition-normal);
    height: 100%;
    display: flex;
    flex-direction: column;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    border: 1px solid transparent;
    position: relative;
    overflow: hidden;
  }
  
  .project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, var(--color-accent), transparent);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform var(--transition-normal);
  }
  
  .project-card:hover {
    transform: translateY(-10px);
    border-color: rgba(58, 134, 255, 0.3);
  }
  
  .project-card:hover::before {
    transform: scaleX(1);
  }
  
  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    align-items: center;
    margin-bottom: var(--space-md);
  }
  
  .card-folder-icon svg {
    color: var(--color-accent);
    width: 36px;
    height: 36px;
  }
  
  .card-links {
    display: flex;
    gap: var(--space-sm);
  }
  
  .card-link {
    color: var(--color-text-muted);
    transition: all var(--transition-normal);
  }
  
  .card-link:hover {
    color: var(--color-accent);
    transform: translateY(-2px);
  }
  
  .card-link svg {
    width: 18px;
    height: 18px;
  }
  
  .card-title {
    margin: 0 0 var(--space-sm) 0;
    font-size: var(--fs-md);
  }
  
  .card-title a {
    color: var(--color-text-bright);
    text-decoration: none;
    transition: all var(--transition-normal);
  }
  
  .card-title a:hover {
    color: var(--color-accent);
  }
  
  .card-description {
    color: var(--color-text-muted);
    font-size: var(--fs-sm);
    line-height: 1.6;
    margin: 0 0 var(--space-md) 0;
    flex-grow: 1;
  }
  
  .card-tech-list {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
    padding: 0;
    margin: 0;
    list-style: none;
  }
  
  .card-tech-list li {
    color: var(--color-text-muted);
    font-size: var(--fs-xs);
    font-family: var(--font-mono);
  }
  
  .projects-more {
    text-align: center;
    margin-top: var(--space-lg);
  }
  
  .more-button {
    display: inline-block;
    padding: var(--space-sm) var(--space-lg);
    background-color: transparent;
    border: 1px solid var(--color-accent);
    border-radius: 4px;
    color: var(--color-accent);
    font-size: var(--fs-sm);
    text-decoration: none;
    transition: all var(--transition-normal);
  }
  
  .more-button:hover {
    background-color: rgba(58, 134, 255, 0.1);
    transform: translateY(-2px);
  }
  
  .hidden-project {
    display: none;
  }
  
  /* Improved responsive styles */
  @media (max-width: 992px) {
    .featured-project,
    .featured-project:nth-child(odd),
    .featured-project:nth-child(even) {
      flex-direction: column;
      padding: var(--space-sm);
      gap: var(--space-md);
    }
    
    .featured-project:nth-child(even) .project-content,
    .featured-project:nth-child(odd) .project-content {
      text-align: left;
      order: 2;
      width: 100%;
    }
    
    .featured-project:nth-child(even) .project-tech-list {
      justify-content: flex-start;
    }
    
    .featured-project:nth-child(even) .project-links {
      justify-content: flex-start;
    }
    
    .featured-project .project-image,
    .featured-project:nth-child(odd) .project-image,
    .featured-project:nth-child(even) .project-image {
      width: 100%;
      order: 1;
    }
    
    .project-description {
      background-color: var(--color-background-alt);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
      padding: var(--space-md);
    }
  }
  
  @media (max-width: 768px) {
    .project-filters {
      justify-content: center;
    }
    
    .project-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
    
    .featured-project {
      margin-bottom: var(--space-lg);
    }
  }
  
  @media (max-width: 480px) {
    .project-grid {
      grid-template-columns: 1fr;
    }
    
    .filter-button {
      font-size: var(--fs-xxs);
      padding: var(--space-xxs) var(--space-xs);
    }
  }
</style> 