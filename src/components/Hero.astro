<section id="hero" class="hero">
  <div class="stars-container">
    <div class="stars"></div>
    <div class="stars2"></div>
    <div class="stars3"></div>
  </div>
  
  <div class="blueprint-grid">
    <div class="grid-horizontal"></div>
    <div class="grid-vertical"></div>
  </div>
  
  <div class="blueprint-circles">
    <div class="circle circle-1 animate-float"></div>
    <div class="circle circle-2 animate-float" style="animation-delay: 0.5s;"></div>
    <div class="circle circle-3 animate-float" style="animation-delay: 1s;"></div>
    <div class="circle circle-4 animate-pulse" style="animation-delay: 0.7s;"></div>
  </div>
  
  <div class="glowing-lines">
    <div class="line line-1"></div>
    <div class="line line-2"></div>
    <div class="line line-3"></div>
  </div>
  
  <div class="container">
    <div class="hero-content">

      <p class="hero-greeting js-animate">Hello, I am</p>
      <h1 class="hero-name js-animate">
        <span class="text-gradient">John Doe</span>
        <div class="name-underline"></div>
      </h1>
      <div class="blueprint-specs">
        <div class="spec-line"></div>
        <div class="spec-detail">
          <span class="animate-slide-right delay-100">FRONTEND DEVELOPER</span>
          <span class="animate-slide-right delay-300">CREATIVE CODER</span>
          <span class="animate-slide-right delay-500">UI SPECIALIST</span>
        </div>
      </div>
      <h2 class="hero-headline js-animate">I craft digital experiences.</h2>
      <p class="hero-description js-animate">
        I'm a creative web developer focused on building clean, 
        elegant solutions with an emphasis on performance, 
        accessibility and thoughtful interactions.
      </p>
      <div class="hero-cta js-animate">
        <a href="#projects" class="button primary animate-pulse">Explore My Work</a>
      </div>
    </div>
  </div>
  
  <div class="floating-elements">
    <div class="floating-element el-1">&lt;/&gt;</div>
    <div class="floating-element el-2">{ }</div>
    <div class="floating-element el-3">&lt;div&gt;</div>
    <div class="floating-element el-4">function()</div>
    <div class="floating-element el-5">const</div>
    <div class="floating-element el-6">return</div>
  </div>
  
  
 <div class="scroll-indicator animate-bounce">
    <div class="mouse">
      <div class="wheel"></div>
    </div>
    <div>
      <span class="scroll-text">Scroll</span>
    </div>
  </div>
</section>

<script>
  import anime from 'animejs';

  document.addEventListener('DOMContentLoaded', () => {
    // Blueprint grid animation
    anime.timeline({
      easing: 'easeOutSine',
    })
    .add({
      targets: '.grid-horizontal',
      opacity: [0, 0.3],
      duration: 1000,
    })
    .add({
      targets: '.grid-vertical',
      opacity: [0, 0.3],
      duration: 1000,
    }, '-=800')
    .add({
      targets: '.blueprint-circles .circle',
      scale: [0, 1],
      opacity: [0, 0.5],
      delay: anime.stagger(200),
      duration: 1000
    }, '-=800')
    .add({
      targets: '.blueprint-label',
      opacity: [0, 1],
      translateY: [10, 0],
      duration: 800
    }, '-=500')
    .add({
      targets: '.blueprint-line',
      scaleX: [0, 1],
      duration: 800
    }, '-=400');
    
    // Animate the measurement specs
    anime({
      targets: '.spec-line',
      width: [0, '100%'],
      easing: 'easeOutExpo',
      duration: 1200,
      delay: 1300
    });
    
    // Animate the floating elements
    anime({
      targets: '.floating-elements .floating-element',
      opacity: [0, 0.7],
      scale: [0.5, 1],
      delay: anime.stagger(200, {start: 700}),
      duration: 1000,
      easing: 'easeOutElastic(1, .6)'
    });
    
    // Animate glowing lines
    anime.timeline({
      easing: 'easeOutSine',
      delay: 1000
    })
    .add({
      targets: '.line-1',
      width: [0, '100%'],
      opacity: [0, 1],
      duration: 1500
    })
    .add({
      targets: '.line-2',
      width: [0, '60%'],
      opacity: [0, 0.7],
      duration: 1000
    }, '-=1000')
    .add({
      targets: '.line-3',
      width: [0, '30%'],
      opacity: [0, 0.5],
      duration: 800
    }, '-=800');
    
    // Hero section animations
    const heroElements = document.querySelectorAll('.js-animate');
    
    anime.timeline({
      easing: 'easeOutExpo',
    })
    .add({
      targets: heroElements,
      opacity: [0, 1],
      translateY: [30, 0],
      delay: anime.stagger(200, {start: 500}),
      duration: 1000
    });
    
    // Animate the name underline
    anime({
      targets: '.name-underline',
      width: [0, '100%'],
      easing: 'easeInOutQuad',
      duration: 1800,
      delay: 1200
    });
    
    // Continuous scroll indicator animation
    anime({
      targets: '.wheel',
      translateY: [0, 6],
      opacity: [1, 0],
      easing: 'easeInOutSine',
      duration: 1500,
      loop: true
    });
    
    // Mouse move ripple effect
    const hero = document.querySelector('.hero');
    hero.addEventListener('mousemove', (e) => {
      const x = e.clientX / window.innerWidth;
      const y = e.clientY / window.innerHeight;
      
      // Move blueprint circles slightly for parallax effect
      anime({
        targets: '.circle-1',
        translateX: x * 30,
        translateY: y * 30,
        duration: 800,
        easing: 'easeOutQuad'
      });
      
      anime({
        targets: '.circle-2',
        translateX: x * -25,
        translateY: y * -25,
        duration: 800,
        easing: 'easeOutQuad'
      });
      
      anime({
        targets: '.circle-3',
        translateX: x * 20,
        translateY: y * -20,
        duration: 800,
        easing: 'easeOutQuad'
      });
      
      anime({
        targets: '.circle-4',
        translateX: x * -15,
        translateY: y * 15,
        duration: 800,
        easing: 'easeOutQuad'
      });
      
      // Move floating elements for deeper parallax
      anime({
        targets: '.floating-elements .floating-element',
        translateX: function(el, i) {
          return x * (i + 1) * 10 * (i % 2 === 0 ? 1 : -1);
        },
        translateY: function(el, i) {
          return y * (i + 1) * 10 * (i % 2 === 0 ? -1 : 1);
        },
        duration: 400,
        easing: 'easeOutQuad'
      });
      
      // Move glowing lines with cursor
      anime({
        targets: '.glowing-lines .line',
        translateX: function(el, i) {
          return x * (i + 1) * 5 * (i % 2 === 0 ? -1 : 1);
        },
        translateY: function(el, i) {
          return y * (i + 1) * 5;
        },
        duration: 1000,
        easing: 'easeOutQuad'
      });
    });
  });
</script>

<style>
  .hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0 var(--space-md);
    overflow: hidden;
  }
  
  .container {
    position: relative;
    width: 100%;
    max-width: 1200px;
    z-index: 5;
  }
  
  /* Stars background */
  .stars-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    overflow: hidden;
  }
  
  .stars, .stars2, .stars3 {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      radial-gradient(1px 1px at 25% 5%, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0)),
      radial-gradient(1px 1px at 50% 15%, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0)),
      radial-gradient(1px 1px at 75% 25%, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0)),
      radial-gradient(2px 2px at 15% 45%, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0)),
      radial-gradient(2px 2px at 35% 65%, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0)),
      radial-gradient(2px 2px at 55% 85%, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0)),
      radial-gradient(1px 1px at 85% 35%, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0));
    background-repeat: repeat;
    background-size: 200px 200px;
  }
  
  .stars {
    animation: stars-move 100s linear infinite;
    opacity: 0.5;
  }
  
  .stars2 {
    background-size: 300px 300px;
    animation: stars-move 150s linear infinite;
    opacity: 0.3;
  }
  
  .stars3 {
    background-size: 400px 400px;
    animation: stars-move 200s linear infinite;
    opacity: 0.2;
  }
  
  @keyframes stars-move {
    0% { background-position: 0 0; }
    100% { background-position: 400px 400px; }
  }
  
  /* Blueprint grid styling */
  .blueprint-grid {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    overflow: hidden;
  }
  
  .grid-horizontal,
  .grid-vertical {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: 40px 40px;
    opacity: 0.3;
  }
  
  .grid-horizontal {
    background-image: linear-gradient(0deg, 
      rgba(58, 134, 255, 0.1) 1px, 
      transparent 1px
    );
  }
  
  .grid-vertical {
    background-image: linear-gradient(90deg, 
      rgba(58, 134, 255, 0.1) 1px, 
      transparent 1px
    );
  }
  
  /* Glowing lines */
  .glowing-lines {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: none;
  }
  
  .line {
    position: absolute;
    height: 1px;
    background: linear-gradient(90deg, 
      rgba(58, 134, 255, 0) 0%, 
      rgba(58, 134, 255, 0.8) 50%, 
      rgba(58, 134, 255, 0) 100%
    );
    box-shadow: 0 0 10px rgba(58, 134, 255, 0.5);
    opacity: 0;
  }
  
  .line-1 {
    top: 30%;
    left: 0;
    width: 100%;
  }
  
  .line-2 {
    top: 60%;
    right: 0;
    width: 60%;
  }
  
  .line-3 {
    top: 80%;
    left: 20%;
    width: 30%;
  }
  
  /* Blueprint circles */
  .blueprint-circles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: none;
  }
  
  .circle {
    position: absolute;
    border-radius: 50%;
    border: 1px solid rgba(58, 134, 255, 0.3);
    opacity: 0.5;
    box-shadow: 0 0 20px rgba(58, 134, 255, 0.1);
  }
  
  .circle::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 5px;
    height: 5px;
    background-color: rgba(58, 134, 255, 0.5);
    border-radius: 50%;
    box-shadow: 0 0 10px rgba(58, 134, 255, 0.8);
  }
  
  .circle-1 {
    width: 300px;
    height: 300px;
    top: 20%;
    right: 5%;
  }
  
  .circle-2 {
    width: 200px;
    height: 200px;
    bottom: 15%;
    left: 5%;
  }
  
  .circle-3 {
    width: 150px;
    height: 150px;
    top: 15%;
    left: 20%;
  }
  
  .circle-4 {
    width: 100px;
    height: 100px;
    bottom: 30%;
    right: 15%;
  }
  
  /* Floating Elements */
  .floating-elements {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 3;
    pointer-events: none;
  }
  
  .floating-element {
    position: absolute;
    font-family: var(--font-mono);
    color: rgba(58, 134, 255, 0.7);
    opacity: 0;
    font-size: var(--fs-sm);
    text-shadow: 0 0 10px rgba(58, 134, 255, 0.5);
  }
  
  .el-1 { top: 15%; left: 15%; }
  .el-2 { top: 25%; right: 20%; }
  .el-3 { top: 50%; left: 10%; }
  .el-4 { top: 65%; right: 15%; }
  .el-5 { top: 80%; left: 25%; }
  .el-6 { top: 85%; right: 30%; }
  
  /* Blueprint labels */
  .blueprint-label {
    position: fixed;
    display: flex;
    align-items: center;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    color: rgba(58, 134, 255, 0.8);
    z-index: 4;
    pointer-events: none;
  }
  
  .blueprint-label.top-left {
    top: 30px;
    left: 30px;
  }
  
  .blueprint-label.bottom-right {
    bottom: 30px;
    right: 30px;
  }
  
  .blueprint-line {
    height: 1px;
    width: 100px;
    background-color: rgba(58, 134, 255, 0.6);
    margin: 0 10px;
    transform-origin: left;
    box-shadow: 0 0 10px rgba(58, 134, 255, 0.3);
  }
  
  .blueprint-line.vertical {
    width: 1px;
    height: 50px;
    margin: 10px 0;
    transform-origin: top;
  }
  
  .blueprint-text {
    white-space: nowrap;
    text-shadow: 0 0 8px rgba(58, 134, 255, 0.5);
  }
  
  /* Specification measurements */
  .blueprint-specs {
    display: flex;
    align-items: center;
    margin: var(--space-sm) 0 var(--space-md) 0;
  }
  
  .spec-line {
    width: 100%;
    height: 1px;
    background-color: rgba(58, 134, 255, 0.5);
    margin-right: var(--space-sm);
    box-shadow: 0 0 8px rgba(58, 134, 255, 0.3);
  }
  
  .spec-detail {
    display: flex;
    gap: var(--space-md);
  }
  
  .spec-detail span {
    font-family: 'Courier New', monospace;
    font-size: var(--fs-xs);
    color: rgba(58, 134, 255, 0.8);
    white-space: nowrap;
    text-shadow: 0 0 8px rgba(58, 134, 255, 0.4);
  }
  
  /* Regular hero content styling */
  .hero-content {
    max-width: 800px;
    position: relative;
    z-index: 6;
  }
  
  .hero-greeting {
    color: var(--color-accent);
    font-size: var(--fs-md);
    margin-bottom: var(--space-xs);
    opacity: 0;
    font-weight: var(--fw-medium);
    letter-spacing: 1px;
    text-transform: uppercase;
    text-shadow: 0 0 8px rgba(58, 134, 255, 0.5);
  }
  
  .hero-name {
    font-size: clamp(var(--fs-xl), 10vw, var(--fs-huge));
    margin-bottom: var(--space-xs);
    opacity: 0;
    letter-spacing: -1px;
    font-weight: var(--fw-light);
    line-height: 1.1;
    position: relative;
  }
  
  .name-underline {
    position: absolute;
    bottom: -10px;
    left: 0;
    height: 3px;
    width: 0;
    background: linear-gradient(90deg, var(--color-accent), transparent);
    box-shadow: 0 0 15px rgba(58, 134, 255, 0.7);
  }
  
  .hero-headline {
    font-size: clamp(var(--fs-lg), 5vw, var(--fs-xl));
    color: var(--color-text-muted);
    margin-bottom: var(--space-md);
    opacity: 0;
    font-weight: var(--fw-light);
  }
  
  .hero-description {
    color: var(--color-text-muted);
    margin-bottom: var(--space-lg);
    max-width: 540px;
    opacity: 0;
    font-size: var(--fs-md);
    line-height: 1.8;
  }
  
  .hero-cta {
    opacity: 0;
  }
  
  .button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-xs);
    padding: var(--space-sm) var(--space-md);
    border-radius: 4px;
    font-size: var(--fs-sm);
    font-weight: var(--fw-medium);
    line-height: 1;
    text-decoration: none;
    cursor: pointer;
    transition: all var(--transition-normal);
    letter-spacing: 1px;
  }
  
  .button.primary {
    background: linear-gradient(90deg, var(--color-gradient-start), var(--color-gradient-end));
    color: white;
    border: none;
    box-shadow: 0 4px 15px rgba(58, 134, 255, 0.4);
  }
  
  .button.primary:hover {
    box-shadow: 0 6px 20px rgba(58, 134, 255, 0.6), 0 0 20px rgba(58, 134, 255, 0.4);
    transform: translateY(-3px);
    opacity: 1;
  }
  
  .scroll-indicator {
    position: absolute;
    bottom: 3rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    opacity: 0.7;
    transition: opacity var(--transition-normal);
    z-index: 6;
  }
  
  .scroll-indicator:hover {
    opacity: 1;
  }
  
  .mouse {
    width: 26px;
    height: 42px;
    border: 2px solid var(--color-accent);
    border-radius: 15px;
    position: relative;
    display: flex;
    justify-content: center;
    box-shadow: 0 0 15px rgba(58, 134, 255, 0.3);
  }
  
  .wheel {
    width: 4px;
    height: 8px;
    background-color: var(--color-accent);
    border-radius: 2px;
    position: absolute;
    top: 8px;
    box-shadow: 0 0 5px rgba(58, 134, 255, 0.5);
  }
  
  .scroll-text {
    color: var(--color-text-muted);
    font-size: var(--fs-xs);
    margin-top: 0.5rem;
    letter-spacing: 2px;
    text-transform: uppercase;
    text-shadow: 0 0 8px rgba(58, 134, 255, 0.3);
  }
  
  /* Responsive styles */
  @media (max-width: 1200px) {
    .hero-content {
      max-width: 700px;
    }
    
    .floating-element {
      font-size: var(--fs-xs);
    }
  }
  
  @media (max-width: 768px) {
    .hero {
      padding: 0 var(--space-sm);
    }
    
    .hero-content {
      text-align: left;
      width: 100%;
      max-width: 100%;
    }
    
    .scroll-indicator {
      display: none;
    }
    
    .blueprint-label.top-left {
      top: 15px;
      left: 15px;
    }
    
    .blueprint-label.bottom-right {
      bottom: 15px;
      right: 15px;
    }
    
    .spec-detail {
      flex-direction: column;
      gap: var(--space-xs);
    }
    
    .circle-1 {
      right: -50px;
    }
    
    .circle-2 {
      left: -50px;
    }
    
    .floating-elements {
      display: none;
    }
    
    .hero-greeting, .hero-name, .hero-headline, .hero-description {
      max-width: 100%;
    }
    
    .stars, .stars2, .stars3 {
      background-size: 150px 150px;
    }
  }
  
  @media (max-width: 480px) {
    .spec-detail span {
      font-size: 11px;
    }
    
    .hero-greeting {
      font-size: var(--fs-sm);
    }
    
    .hero-name {
      font-size: clamp(var(--fs-lg), 8vw, var(--fs-xl));
    }
    
    .hero-headline {
      font-size: clamp(var(--fs-md), 5vw, var(--fs-lg));
    }
    
    .hero-description {
      font-size: var(--fs-sm);
    }
    
    .glowing-lines {
      opacity: 0.5;
    }
  }
</style>

<!-- Load particles.js from CDN -->
<script is:inline src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>

<!-- Custom cursor implementation -->
<div class="cursor-dot"></div>
<div class="cursor-dot-outline"></div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Custom cursor implementation
    const cursorDot = document.querySelector('.cursor-dot');
    const cursorOutline = document.querySelector('.cursor-dot-outline');
    
    if (cursorDot && cursorOutline && window.innerWidth > 768) {
      window.addEventListener('mousemove', (e) => {
        const posX = e.clientX;
        const posY = e.clientY;
        
        // Dot position with no delay
        cursorDot.style.left = posX + 'px';
        cursorDot.style.top = posY + 'px';
        
        // Outline follows with slight delay (more smoothly)
        cursorOutline.style.left = posX + 'px';
        cursorOutline.style.top = posY + 'px';
        
        // Show the cursor elements once we have position
        if (cursorDot.style.opacity === '0' || cursorDot.style.opacity === '') {
          cursorDot.style.opacity = '1';
          cursorOutline.style.opacity = '1';
        }
      });
      
      // Handle cursor on links and buttons
      const handleLinks = () => {
        const links = document.querySelectorAll('a, button, input, textarea, [role="button"]');
        
        links.forEach(link => {
          link.addEventListener('mouseenter', () => {
            cursorDot.style.transform = 'translate(-50%, -50%) scale(1.5)';
            cursorOutline.style.transform = 'translate(-50%, -50%) scale(1.5)';
            cursorOutline.style.backgroundColor = 'rgba(58, 134, 255, 0.2)';
          });
          
          link.addEventListener('mouseleave', () => {
            cursorDot.style.transform = 'translate(-50%, -50%) scale(1)';
            cursorOutline.style.transform = 'translate(-50%, -50%) scale(1)';
            cursorOutline.style.backgroundColor = 'rgba(58, 134, 255, 0.1)';
          });
        });
      };
      
      // Initial handling of links
      handleLinks();
      
      // Re-handle links when content might change 
      // (for example after filtering projects or loading dynamic content)
      document.addEventListener('contentchange', handleLinks);
      
      // Hide cursor when leaving the window
      document.addEventListener('mouseleave', () => {
        cursorDot.style.opacity = '0';
        cursorOutline.style.opacity = '0';
      });
      
      // Show cursor when entering the window
      document.addEventListener('mouseenter', () => {
        cursorDot.style.opacity = '1';
        cursorOutline.style.opacity = '1';
      });
    }
  });
</script> 