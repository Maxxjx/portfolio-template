<section id="hero" class="hero">
  <div class="particle-container" id="particles-js"></div>
  <div class="container">
    <div class="hero-content">
      <p class="hero-greeting js-animate">Hello, I am</p>
      <h1 class="hero-name js-animate">
        <span class="text-gradient">John Doe</span>
      </h1>
      <h2 class="hero-headline js-animate">I craft digital experiences.</h2>
      <p class="hero-description js-animate">
        I'm a creative web developer focused on building clean, 
        elegant solutions with an emphasis on performance, 
        accessibility and thoughtful interactions.
      </p>
      <div class="hero-cta js-animate">
        <a href="#projects" class="button primary animate-pulse">Explore My Work</a>
      </div>
    </div>
  </div>
  <div class="scroll-indicator">
    <div class="mouse">
      <div class="wheel"></div>
    </div>
    <div>
      <span class="scroll-text">Scroll</span>
    </div>
  </div>
</section>

<script>
  import anime from 'animejs';

  document.addEventListener('DOMContentLoaded', () => {
    // Hero section animations
    const heroElements = document.querySelectorAll('.js-animate');
    
    anime.timeline({
      easing: 'easeOutExpo',
    })
    .add({
      targets: heroElements,
      opacity: [0, 1],
      translateY: [30, 0],
      delay: anime.stagger(200, {start: 500}),
      duration: 1000
    });
    
    // Continuous scroll indicator animation
    anime({
      targets: '.wheel',
      translateY: [0, 6],
      opacity: [1, 0],
      easing: 'easeInOutSine',
      duration: 1500,
      loop: true
    });
    
    // Load particles.js if it exists
    if (typeof window.particlesJS !== 'undefined') {
      window.particlesJS('particles-js', {
        particles: {
          number: { value: 50, density: { enable: true, value_area: 800 } },
          color: { value: '#3A86FF' },
          shape: { type: 'circle' },
          opacity: { value: 0.2, random: true },
          size: { value: 3, random: true },
          line_linked: {
            enable: true,
            distance: 150,
            color: '#3A86FF',
            opacity: 0.15,
            width: 1
          },
          move: {
            enable: true,
            speed: 1,
            direction: 'none',
            random: true,
            straight: false,
            out_mode: 'out',
            bounce: false
          }
        },
        interactivity: {
          detect_on: 'canvas',
          events: {
            onhover: { enable: true, mode: 'grab' },
            onclick: { enable: true, mode: 'push' },
            resize: true
          },
          modes: {
            grab: { distance: 140, line_linked: { opacity: 0.3 } },
            push: { particles_nb: 3 }
          }
        },
        retina_detect: true
      });
    }
  });
</script>

<style>
  .hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0 var(--space-md);
    overflow: hidden;
  }
  
  .container {
    position: relative;
    width: 100%;
    max-width: 1200px;
    z-index: 5;
  }
  
  /* Stars background */
  .stars-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    overflow: hidden;
  }
  
  .stars, .stars2, .stars3 {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      radial-gradient(1px 1px at 25% 5%, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0)),
      radial-gradient(1px 1px at 50% 15%, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0)),
      radial-gradient(1px 1px at 75% 25%, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0)),
      radial-gradient(2px 2px at 15% 45%, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0)),
      radial-gradient(2px 2px at 35% 65%, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0)),
      radial-gradient(2px 2px at 55% 85%, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0)),
      radial-gradient(1px 1px at 85% 35%, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0));
    background-repeat: repeat;
    background-size: 200px 200px;
  }
  
  .stars {
    animation: stars-move 100s linear infinite;
    opacity: 0.5;
  }
  
  .stars2 {
    background-size: 300px 300px;
    animation: stars-move 150s linear infinite;
    opacity: 0.3;
  }
  
  .stars3 {
    background-size: 400px 400px;
    animation: stars-move 200s linear infinite;
    opacity: 0.2;
  }
  
  @keyframes stars-move {
    0% { background-position: 0 0; }
    100% { background-position: 400px 400px; }
  }
  
  .particle-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: none;
  }
  
  .hero-content {
    max-width: 800px;
    position: relative;
    z-index: 6;
  }
  
  .hero-greeting {
    color: var(--color-accent);
    font-size: var(--fs-md);
    margin-bottom: var(--space-xs);
    opacity: 0;
    font-weight: var(--fw-medium);
    letter-spacing: 1px;
    text-transform: uppercase;
    text-shadow: 0 0 8px rgba(58, 134, 255, 0.5);
  }
  
  .hero-name {
    font-size: clamp(var(--fs-xl), 10vw, var(--fs-huge));
    margin-bottom: var(--space-xs);
    opacity: 0;
    letter-spacing: -1px;
    font-weight: var(--fw-light);
    line-height: 1.1;
  }
  
  .hero-headline {
    font-size: clamp(var(--fs-lg), 5vw, var(--fs-xl));
    color: var(--color-text-muted);
    margin-bottom: var(--space-md);
    opacity: 0;
    font-weight: var(--fw-light);
  }
  
  .hero-description {
    color: var(--color-text-muted);
    margin-bottom: var(--space-lg);
    max-width: 540px;
    opacity: 0;
    font-size: var(--fs-md);
    line-height: 1.8;
  }
  
  .hero-cta {
    opacity: 0;
  }
  
  .button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-xs);
    padding: var(--space-sm) var(--space-md);
    border-radius: 4px;
    font-size: var(--fs-sm);
    font-weight: var(--fw-medium);
    line-height: 1;
    text-decoration: none;
    cursor: pointer;
    transition: all var(--transition-normal);
    letter-spacing: 1px;
  }
  
  .button.primary {
    background: linear-gradient(90deg, var(--color-gradient-start), var(--color-gradient-end));
    color: white;
    border: none;
    box-shadow: 0 4px 15px rgba(58, 134, 255, 0.4);
  }
  
  .button.primary:hover {
    box-shadow: 0 6px 20px rgba(58, 134, 255, 0.6), 0 0 20px rgba(58, 134, 255, 0.4);
    transform: translateY(-3px);
    opacity: 1;
  }
  
  .scroll-indicator {
    position: absolute;
    bottom: 3rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    opacity: 0.7;
    transition: opacity var(--transition-normal);
    z-index: 6;
  }
  
  .scroll-indicator:hover {
    opacity: 1;
  }
  
  .mouse {
    width: 26px;
    height: 42px;
    border: 2px solid var(--color-accent);
    border-radius: 15px;
    position: relative;
    display: flex;
    justify-content: center;
    box-shadow: 0 0 15px rgba(58, 134, 255, 0.3);
  }
  
  .wheel {
    width: 4px;
    height: 8px;
    background-color: var(--color-accent);
    border-radius: 2px;
    position: absolute;
    top: 8px;
    box-shadow: 0 0 5px rgba(58, 134, 255, 0.5);
  }
  
  .scroll-text {
    color: var(--color-text-muted);
    font-size: var(--fs-xs);
    margin-top: 0.5rem;
    letter-spacing: 2px;
    text-transform: uppercase;
    text-shadow: 0 0 8px rgba(58, 134, 255, 0.3);
  }
  
  /* Responsive styles */
  @media (max-width: 1200px) {
    .hero-content {
      max-width: 700px;
    }
    
    .floating-element {
      font-size: var(--fs-xs);
    }
  }
  
  @media (max-width: 768px) {
    .hero {
      padding: 0 var(--space-sm);
    }
    
    .hero-content {
      text-align: left;
      width: 100%;
      max-width: 100%;
    }
    
    .scroll-indicator {
      display: none;
    }
    
    .hero-name {
      font-size: clamp(var(--fs-xl), 15vw, var(--fs-xxl));
    }
  }
</style>

<!-- Load particles.js from CDN -->
<script is:inline src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>

<!-- Custom cursor implementation -->
<div class="cursor-dot"></div>
<div class="cursor-dot-outline"></div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Custom cursor implementation
    const cursorDot = document.querySelector('.cursor-dot');
    const cursorOutline = document.querySelector('.cursor-dot-outline');
    
    if (cursorDot && cursorOutline && window.innerWidth > 768) {
      window.addEventListener('mousemove', (e) => {
        const posX = e.clientX;
        const posY = e.clientY;
        
        // Dot position with no delay
        cursorDot.style.left = posX + 'px';
        cursorDot.style.top = posY + 'px';
        
        // Outline follows with slight delay (more smoothly)
        cursorOutline.style.left = posX + 'px';
        cursorOutline.style.top = posY + 'px';
        
        // Show the cursor elements once we have position
        if (cursorDot.style.opacity === '0' || cursorDot.style.opacity === '') {
          cursorDot.style.opacity = '1';
          cursorOutline.style.opacity = '1';
        }
      });
      
      // Handle cursor on links and buttons
      const handleLinks = () => {
        const links = document.querySelectorAll('a, button, input, textarea, [role="button"]');
        
        links.forEach(link => {
          link.addEventListener('mouseenter', () => {
            cursorDot.style.transform = 'translate(-50%, -50%) scale(1.5)';
            cursorOutline.style.transform = 'translate(-50%, -50%) scale(1.5)';
            cursorOutline.style.backgroundColor = 'rgba(58, 134, 255, 0.2)';
          });
          
          link.addEventListener('mouseleave', () => {
            cursorDot.style.transform = 'translate(-50%, -50%) scale(1)';
            cursorOutline.style.transform = 'translate(-50%, -50%) scale(1)';
            cursorOutline.style.backgroundColor = 'rgba(58, 134, 255, 0.1)';
          });
        });
      };
      
      // Initial handling of links
      handleLinks();
      
      // Re-handle links when content might change 
      // (for example after filtering projects or loading dynamic content)
      document.addEventListener('contentchange', handleLinks);
      
      // Hide cursor when leaving the window
      document.addEventListener('mouseleave', () => {
        cursorDot.style.opacity = '0';
        cursorOutline.style.opacity = '0';
      });
      
      // Show cursor when entering the window
      document.addEventListener('mouseenter', () => {
        cursorDot.style.opacity = '1';
        cursorOutline.style.opacity = '1';
      });
    }
  });
</script> 